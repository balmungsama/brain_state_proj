PATH <- '/mnt/c/Users/john/OneDrive/2017-2018/brain_state_proj/Preprocessing/tmp_data'
COND <- 'Resting'
RM   <- 'UNION'
##### import regression matrices of DVARS & FD #####
DVARS <- read.table(file.path(PATH, paste0(COND, '_DVARS.par')) )
FD    <- read.table(file.path(PATH, paste0(COND, '_FD.par'   )) )
##### combine regression matrices #####
if (RM == 'UNION') {
CONFOUND <- DVARS
for (col.FD in dim(FD)[2]) {
for (col.DVARS in dim(DVARS)[2]) {
tmp.col     <- FD[, col.FD] + DVARS[, col.DVARS]
tmp.col.avg <- mean(tmp.col)
print(tmp.col.avg)
}
}
}
if (RM == 'UNION') {
CONFOUND <- DVARS
for (col.FD in 1:dim(FD)[2]) {
for (col.DVARS in 1:dim(DVARS)[2]) {
tmp.col     <- FD[, col.FD] + DVARS[, col.DVARS]
tmp.col.avg <- mean(tmp.col)
print(tmp.col.avg)
}
}
}
if (RM == 'UNION') {
CONFOUND <- DVARS
for (col.DVARS in 1:dim(DVARS)[2]) {
for (col.FD in 1:dim(FD)[2]) {
tmp.col     <- FD[, col.FD] + DVARS[, col.DVARS]
tmp.col.avg <- mean(tmp.col)
print(tmp.col.avg)
}
}
}
##### values for testing script #####
PATH <- '/mnt/c/Users/john/OneDrive/2017-2018/brain_state_proj/Preprocessing/tmp_data'
COND <- 'Resting'
RM   <- 'UNION'
##### import regression matrices of DVARS & FD #####
DVARS <- read.table(file.path(PATH, paste0(COND, '_DVARS.par')) )
FD    <- read.table(file.path(PATH, paste0(COND, '_FD.par'   )) )
##### combine regression matrices #####
if (RM == 'UNION') {
CONFOUND <- cbind(DVARS, FD)
rowsum(CONFOUND)
}
##### values for testing script #####
PATH <- '/mnt/c/Users/john/OneDrive/2017-2018/brain_state_proj/Preprocessing/tmp_data'
COND <- 'Resting'
RM   <- 'UNION'
##### import regression matrices of DVARS & FD #####
DVARS <- read.table(file.path(PATH, paste0(COND, '_DVARS.par')) )
FD    <- read.table(file.path(PATH, paste0(COND, '_FD.par'   )) )
##### combine regression matrices #####
if (RM == 'UNION') {
CONFOUND <- cbind(DVARS, FD)
rowSums(CONFOUND)
}
##### values for testing script #####
PATH <- '/mnt/c/Users/john/OneDrive/2017-2018/brain_state_proj/Preprocessing/tmp_data'
COND <- 'Resting'
RM   <- 'UNION'
##### import regression matrices of DVARS & FD #####
DVARS <- read.table(file.path(PATH, paste0(COND, '_DVARS.par')) )
FD    <- read.table(file.path(PATH, paste0(COND, '_FD.par'   )) )
##### combine regression matrices #####
if (RM == 'UNION') {
CONFOUND <- cbind(DVARS, FD)
row.sums <- rowSums(CONFOUND)
}
View(CONFOUND)
##### values for testing script #####
PATH <- '/mnt/c/Users/john/OneDrive/2017-2018/brain_state_proj/Preprocessing/tmp_data'
COND <- 'Resting'
RM   <- 'UNION'
##### import regression matrices of DVARS & FD #####
DVARS <- read.table(file.path(PATH, paste0(COND, '_DVARS.par')) )
FD    <- read.table(file.path(PATH, paste0(COND, '_FD.par'   )) )
##### combine regression matrices #####
if (RM == 'UNION') {
CONFOUND <- cbind(DVARS, FD)
row.sums <- rowSums(CONFOUND)
row.redundant <- which(row.sums == 2)
}
row.redundant
##### values for testing script #####
PATH <- '/mnt/c/Users/john/OneDrive/2017-2018/brain_state_proj/Preprocessing/tmp_data'
COND <- 'Resting'
RM   <- 'UNION'
##### import regression matrices of DVARS & FD #####
DVARS <- read.table(file.path(PATH, paste0(COND, '_DVARS.par')) )
FD    <- read.table(file.path(PATH, paste0(COND, '_FD.par'   )) )
##### combine regression matrices #####
if (RM == 'UNION') {
CONFOUND <- cbind(DVARS, FD)
row.sums      <- rowSums(CONFOUND)
row.redundant <- which(row.sums == 2)
for (red in row.redundant) {
COUNFOUND.row <- CONFOUND[red, ]
print(CONFOUND.row)
}
}
PATH <- '/mnt/c/Users/john/OneDrive/2017-2018/brain_state_proj/Preprocessing/tmp_data'
COND <- 'Resting'
RM   <- 'UNION'
##### import regression matrices of DVARS & FD #####
DVARS <- read.table(file.path(PATH, paste0(COND, '_DVARS.par')) )
FD    <- read.table(file.path(PATH, paste0(COND, '_FD.par'   )) )
##### combine regression matrices #####
if (RM == 'UNION') {
CONFOUND <- cbind(DVARS, FD)
row.sums      <- rowSums(CONFOUND)
row.redundant <- which(row.sums == 2)
for (red in row.redundant) {
CONFOUND.row <- CONFOUND[red, ]
print(CONFOUND.row)
}
}
which(CONFOUND.row == 1)
which(CONFOUND.row == 1)[2]
PATH <- '/mnt/c/Users/john/OneDrive/2017-2018/brain_state_proj/Preprocessing/tmp_data'
COND <- 'Resting'
RM   <- 'UNION'
##### import regression matrices of DVARS & FD #####
DVARS <- read.table(file.path(PATH, paste0(COND, '_DVARS.par')) )
FD    <- read.table(file.path(PATH, paste0(COND, '_FD.par'   )) )
##### combine regression matrices #####
if (RM == 'UNION') {
CONFOUND <- cbind(DVARS, FD)
row.sums      <- rowSums(CONFOUND)
row.redundant <- which(row.sums == 2)
rm.col <- NULL
for (red in row.redundant) {
CONFOUND.row <- CONFOUND[red, ]
rm.col <- c( rm.col, which(CONFOUND.row == 1)[2] )
}
CONFOUND.test <- CONFOUND[, 1rm.col]
}
PATH <- '/mnt/c/Users/john/OneDrive/2017-2018/brain_state_proj/Preprocessing/tmp_data'
COND <- 'Resting'
RM   <- 'UNION'
##### import regression matrices of DVARS & FD #####
DVARS <- read.table(file.path(PATH, paste0(COND, '_DVARS.par')) )
FD    <- read.table(file.path(PATH, paste0(COND, '_FD.par'   )) )
##### combine regression matrices #####
if (RM == 'UNION') {
CONFOUND <- cbind(DVARS, FD)
row.sums      <- rowSums(CONFOUND)
row.redundant <- which(row.sums == 2)
rm.col <- NULL
for (red in row.redundant) {
CONFOUND.row <- CONFOUND[red, ]
rm.col <- c( rm.col, which(CONFOUND.row == 1)[2] )
}
CONFOUND.test <- CONFOUND[, -rm.col]
}
rowSums(CONFOUND.test)
rowSums(CONFOUND.test) > 1
args        <- commandArgs(trailingOnly = TRUE)
unused_args <- NULL
for (arg in args) {
arg <- strsplit(arg, split = '=')[[1]]
if (arg[1] == '--PATH') {
PATH <- arg[2]
} else if (arg[1] == '--COND') {
COND <- arg[2]
} else if (arg[1] == '--RM') {
RM <- arg[2]
} else {
unused_args <- c(unused_args, paste0(arg[1], '=', arg[2]))
}
}
if (length(unused_args) > 0) {
print(paste('WARNING: unused arguments ', unused_args))
}
##### values for testing script #####
PATH <- '/mnt/c/Users/john/OneDrive/2017-2018/brain_state_proj/Preprocessing/tmp_data'
COND <- 'Resting'
RM   <- 'UNION'
##### import regression matrices of DVARS & FD #####
DVARS <- read.table(file.path(PATH, paste0(COND, '_DVARS.par')) )
FD    <- read.table(file.path(PATH, paste0(COND, '_FD.par'   )) )
##### combine regression matrices #####
if (RM == 'UNION') {
CONFOUND <- cbind(DVARS, FD)
row.sums      <- rowSums(CONFOUND)
row.redundant <- which(row.sums == 2)
rm.col <- NULL
for (red in row.redundant) {
CONFOUND.row <- CONFOUND[red, ]
rm.col <- c( rm.col, which(CONFOUND.row == 1)[2] )
}
CONFOUND <- CONFOUND[, -rm.col]
} else if (RM == 'INTERSECT') {
CONFOUND <- cbind(DVARS, FD)
row.sums      <- rowSums(CONFOUND)
row.redundant <- which(row.sums == 2)
keep.col <- NULL
for (red in row.redundant) {
CONFOUND.row <- CONFOUND[red, ]
keep.col <- c( keep.col, which(CONFOUND.row == 1)[2] )
}
CONFOUND <- CONFOUND[, keep.col]
}
mean(rowSums(CONFOUND) > 1)
##### values for testing script #####
PATH <- '/mnt/c/Users/john/OneDrive/2017-2018/brain_state_proj/Preprocessing/tmp_data'
COND <- 'Resting'
RM   <- 'INTERSECT'
##### import regression matrices of DVARS & FD #####
DVARS <- read.table(file.path(PATH, paste0(COND, '_DVARS.par')) )
FD    <- read.table(file.path(PATH, paste0(COND, '_FD.par'   )) )
##### combine regression matrices #####
if (RM == 'UNION') {
CONFOUND <- cbind(DVARS, FD)
row.sums      <- rowSums(CONFOUND)
row.redundant <- which(row.sums == 2)
rm.col <- NULL
for (red in row.redundant) {
CONFOUND.row <- CONFOUND[red, ]
rm.col <- c( rm.col, which(CONFOUND.row == 1)[2] )
}
CONFOUND <- CONFOUND[, -rm.col]
} else if (RM == 'INTERSECT') {
CONFOUND <- cbind(DVARS, FD)
row.sums      <- rowSums(CONFOUND)
row.redundant <- which(row.sums == 2)
keep.col <- NULL
for (red in row.redundant) {
CONFOUND.row <- CONFOUND[red, ]
keep.col <- c( keep.col, which(CONFOUND.row == 1)[2] )
}
CONFOUND <- CONFOUND[, keep.col]
}
mean(rowSums(CONFOUND) > 1)
##### values for testing script #####
PATH <- '/mnt/c/Users/john/OneDrive/2017-2018/brain_state_proj/Preprocessing/tmp_data'
COND <- 'Resting'
RM   <- 'FD'
##### import regression matrices of DVARS & FD #####
DVARS <- read.table(file.path(PATH, paste0(COND, '_DVARS.par')) )
FD    <- read.table(file.path(PATH, paste0(COND, '_FD.par'   )) )
##### combine regression matrices according to RM mode #####
if (RM == 'UNION') {
CONFOUND <- cbind(DVARS, FD)
row.sums      <- rowSums(CONFOUND)
row.redundant <- which(row.sums == 2)
rm.col <- NULL
for (red in row.redundant) {
CONFOUND.row <- CONFOUND[red, ]
rm.col <- c( rm.col, which(CONFOUND.row == 1)[2] )
}
CONFOUND <- CONFOUND[, -rm.col]
} else if (RM == 'INTERSECT') {
CONFOUND <- cbind(DVARS, FD)
row.sums      <- rowSums(CONFOUND)
row.redundant <- which(row.sums == 2)
keep.col <- NULL
for (red in row.redundant) {
CONFOUND.row <- CONFOUND[red, ]
keep.col <- c( keep.col, which(CONFOUND.row == 1)[2] )
}
CONFOUND <- CONFOUND[, keep.col]
} else if (RM == 'FD') {
CONFOUND <- FD
} else if (RM == 'DVARS') {
CONFOUND <- DVARS
}
##### save the confound matrix #####
write.table(CONFOUND, file.path(PATH, 'mot_analysis', paste0(COND, '_CONFOUND.par') ) )
PATH <- '/mnt/c/Users/john/OneDrive/2017-2018/brain_state_proj/Preprocessing/tmp_data'
COND <- 'Resting'
RM   <- 'FD'
##### import regression matrices of DVARS & FD #####
DVARS <- read.table(file.path(PATH, paste0(COND, '_DVARS.par')) )
FD    <- read.table(file.path(PATH, paste0(COND, '_FD.par'   )) )
##### combine regression matrices according to RM mode #####
if (RM == 'UNION') {
CONFOUND <- cbind(DVARS, FD)
row.sums      <- rowSums(CONFOUND)
row.redundant <- which(row.sums == 2)
rm.col <- NULL
for (red in row.redundant) {
CONFOUND.row <- CONFOUND[red, ]
rm.col <- c( rm.col, which(CONFOUND.row == 1)[2] )
}
CONFOUND <- CONFOUND[, -rm.col]
} else if (RM == 'INTERSECT') {
CONFOUND <- cbind(DVARS, FD)
row.sums      <- rowSums(CONFOUND)
row.redundant <- which(row.sums == 2)
keep.col <- NULL
for (red in row.redundant) {
CONFOUND.row <- CONFOUND[red, ]
keep.col <- c( keep.col, which(CONFOUND.row == 1)[2] )
}
CONFOUND <- CONFOUND[, keep.col]
} else if (RM == 'FD') {
CONFOUND <- FD
} else if (RM == 'DVARS') {
CONFOUND <- DVARS
}
##### save the confound matrix #####
write.table(CONFOUND, file.path(PATH, 'mot_analysis', paste0(COND, '_CONFOUND.par') ) )
write.table(CONFOUND, file.path(PATH, 'mot_analysis', paste0(COND, '_CONFOUND.par') ), row.names = F, col.names = F )
##### values for testing script #####
PATH <- '/mnt/c/Users/john/OneDrive/2017-2018/brain_state_proj/Preprocessing/tmp_data'
COND <- 'Resting'
RM   <- 'DVARS'
##### import regression matrices of DVARS & FD #####
DVARS <- read.table(file.path(PATH, paste0(COND, '_DVARS.par')) )
FD    <- read.table(file.path(PATH, paste0(COND, '_FD.par'   )) )
##### combine regression matrices according to RM mode #####
if (RM == 'UNION') {
CONFOUND <- cbind(DVARS, FD)
row.sums      <- rowSums(CONFOUND)
row.redundant <- which(row.sums == 2)
rm.col <- NULL
for (red in row.redundant) {
CONFOUND.row <- CONFOUND[red, ]
rm.col <- c( rm.col, which(CONFOUND.row == 1)[2] )
}
CONFOUND <- CONFOUND[, -rm.col]
} else if (RM == 'INTERSECT') {
CONFOUND <- cbind(DVARS, FD)
row.sums      <- rowSums(CONFOUND)
row.redundant <- which(row.sums == 2)
keep.col <- NULL
for (red in row.redundant) {
CONFOUND.row <- CONFOUND[red, ]
keep.col <- c( keep.col, which(CONFOUND.row == 1)[2] )
}
CONFOUND <- CONFOUND[, keep.col]
} else if (RM == 'FD') {
CONFOUND <- FD
} else if (RM == 'DVARS') {
CONFOUND <- DVARS
}
##### save the confound matrix #####
write.table(CONFOUND, file.path(PATH, 'mot_analysis', paste0(COND, '_CONFOUND.par') ), row.names = F, col.names = F )
##### values for testing script #####
PATH <- '/mnt/c/Users/john/OneDrive/2017-2018/brain_state_proj/Preprocessing/tmp_data'
COND <- 'Resting'
RM   <- 'UNION'
##### import regression matrices of DVARS & FD #####
DVARS <- read.table(file.path(PATH, paste0(COND, '_DVARS.par')) )
FD    <- read.table(file.path(PATH, paste0(COND, '_FD.par'   )) )
##### combine regression matrices according to RM mode #####
if (RM == 'UNION') {
CONFOUND <- cbind(DVARS, FD)
row.sums      <- rowSums(CONFOUND)
row.redundant <- which(row.sums == 2)
rm.col <- NULL
for (red in row.redundant) {
CONFOUND.row <- CONFOUND[red, ]
rm.col <- c( rm.col, which(CONFOUND.row == 1)[2] )
}
CONFOUND <- CONFOUND[, -rm.col]
} else if (RM == 'INTERSECT') {
CONFOUND <- cbind(DVARS, FD)
row.sums      <- rowSums(CONFOUND)
row.redundant <- which(row.sums == 2)
keep.col <- NULL
for (red in row.redundant) {
CONFOUND.row <- CONFOUND[red, ]
keep.col <- c( keep.col, which(CONFOUND.row == 1)[2] )
}
CONFOUND <- CONFOUND[, keep.col]
} else if (RM == 'FD') {
CONFOUND <- FD
} else if (RM == 'DVARS') {
CONFOUND <- DVARS
}
##### save the confound matrix #####
write.table(CONFOUND, file.path(PATH, 'mot_analysis', paste0(COND, '_CONFOUND.par') ), row.names = F, col.names = F )
setwd("/mnt/c/Users/john/OneDrive/2017-2018/brain_state_proj/Preprocessing")
cat('  Creating confound matrix...')
##### values for testing script #####
PATH <- '/mnt/c/Users/john/OneDrive/2017-2018/brain_state_proj/Preprocessing'
COND <- 'Resting'
RM   <- 'UNION'
##### import regression matrices of DVARS & FD #####
DVARS <- read.table(file.path(PATH, 'mot_analysis', paste0(COND, '_DVARS.par')) )
FD    <- read.table(file.path(PATH, 'mot_analysis', paste0(COND, '_FD.par'   )) )
##### combine regression matrices according to RM mode #####
if (RM == 'UNION') {
CONFOUND <- cbind(DVARS, FD)
row.sums      <- rowSums(CONFOUND)
row.redundant <- which(row.sums == 2)
rm.col <- NULL
for (red in row.redundant) {
CONFOUND.row <- CONFOUND[red, ]
rm.col <- c( rm.col, which(CONFOUND.row == 1)[2] )
}
rm.col   <- NULL
CONFOUND <- CONFOUND[, -rm.col]
} else if (RM == 'INTERSECT') {
CONFOUND <- cbind(DVARS, FD)
row.sums      <- rowSums(CONFOUND)
row.redundant <- which(row.sums == 2)
keep.col <- NULL
for (red in row.redundant) {
CONFOUND.row <- CONFOUND[red, ]
keep.col <- c( keep.col, which(CONFOUND.row == 1)[2] )
}
CONFOUND <- CONFOUND[, keep.col]
} else if (RM == 'FD') {
CONFOUND <- FD
} else if (RM == 'DVARS') {
CONFOUND <- DVARS
}
##### save the confound matrix #####
write.table(CONFOUND, file.path(PATH, 'mot_analysis', paste0(COND, '_CONFOUND.par') ), row.names = F, col.names = F )
cat('  Creating confound matrix...')
##### values for testing script #####
PATH <- '/mnt/c/Users/john/OneDrive/2017-2018/brain_state_proj/Preprocessing'
COND <- 'Resting'
RM   <- 'UNION'
##### import regression matrices of DVARS & FD #####
DVARS <- read.table(file.path(PATH, 'mot_analysis', paste0(COND, '_DVARS.par')) )
FD    <- read.table(file.path(PATH, 'mot_analysis', paste0(COND, '_FD.par'   )) )
##### combine regression matrices according to RM mode #####
if (RM == 'UNION') {
CONFOUND <- cbind(DVARS, FD)
row.sums      <- rowSums(CONFOUND)
row.redundant <- which(row.sums == 2)
rm.col <- NULL
for (red in row.redundant) {
CONFOUND.row <- CONFOUND[red, ]
rm.col <- c( rm.col, which(CONFOUND.row == 1)[2] )
}
# rm.col   <- NULL
CONFOUND <- CONFOUND[, -rm.col]
} else if (RM == 'INTERSECT') {
CONFOUND <- cbind(DVARS, FD)
row.sums      <- rowSums(CONFOUND)
row.redundant <- which(row.sums == 2)
keep.col <- NULL
for (red in row.redundant) {
CONFOUND.row <- CONFOUND[red, ]
keep.col <- c( keep.col, which(CONFOUND.row == 1)[2] )
}
CONFOUND <- CONFOUND[, keep.col]
} else if (RM == 'FD') {
CONFOUND <- FD
} else if (RM == 'DVARS') {
CONFOUND <- DVARS
}
##### save the confound matrix #####
write.table(CONFOUND, file.path(PATH, 'mot_analysis', paste0(COND, '_CONFOUND.par') ), row.names = F, col.names = F )
rm.col   <- NULL
rm.col
length(rm.col)
keep.col <- NULL
CONFOUND <- CONFOUND[, keep.col]
CONFOUND
matrix(data = 0, ncol = 1, nrow = dim(CONFOUND)[1] )
vals.DVARS <- read.table( file.path(PATH, 'mot_analysis', paste0(COND, '_DVARS.val')) )
vals.DVARS
file.exists(file.path(PATH, 'mot_analysis', paste0(COND, '_DVARS.par')) )
vals.DVARS[1]
dim(vals.DVARS[1])
dim(vals.DVARS)[1]
PATH <- '/mnt/c/Users/john/OneDrive/2017-2018/brain_state_proj/Preprocessing'
COND <- 'Resting'
RM   <- 'UNION'
vals.DVARS <- read.table( file.path(PATH, 'mot_analysis', paste0(COND, '_DVARS.val')) )
DVARS <- matrix(data = 0, ncol = 1, nrow = dim(vals.DVARS)[1] )
FD    <- matrix(data = 0, ncol = 1, nrow = dim(vals.DVARS)[1] )
if (RM == 'UNION') {
CONFOUND <- cbind(DVARS, FD)
row.sums      <- rowSums(CONFOUND)
row.redundant <- which(row.sums == 2)
rm.col <- NULL
for (red in row.redundant) {
CONFOUND.row <- CONFOUND[red, ]
rm.col <- c( rm.col, which(CONFOUND.row == 1)[2] )
}
if (length(rm.col) > 0) {
CONFOUND <- CONFOUND[, -rm.col]
}
} else if (RM == 'INTERSECT') {
CONFOUND <- cbind(DVARS, FD)
row.sums      <- rowSums(CONFOUND)
row.redundant <- which(row.sums == 2)
keep.col <- NULL
for (red in row.redundant) {
CONFOUND.row <- CONFOUND[red, ]
keep.col <- c( keep.col, which(CONFOUND.row == 1)[2] )
}
if (length(keep.col) > 0) {
CONFOUND <- CONFOUND[, keep.col]
} else {
CONFOUND <- matrix(data = 0, ncol = 1, nrow = dim(CONFOUND)[1] )
}
} else if (RM == 'FD') {
CONFOUND <- FD
} else if (RM == 'DVARS') {
CONFOUND <- DVARS
}
##### save the confound matrix #####
write.table(CONFOUND, file.path(PATH, 'mot_analysis', paste0(COND, '_CONFOUND.par') ), row.names = F, col.names = F )
sum(CONFOUND)
CONFOUND[,1]
}
CONFOUND[,1]
dim(CONFOUND)[1]
dim(CONFOUND)
matrix(data = 0, ncol = 1, nrow = dim(CONFOUND)[1] )
